#!/bin/bash

# Script to check for new Sui testnet releases and notify via local mail
# Usage: ./check-sui-version.sh

# Configuration
REPO_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
CARGO_TOML="$REPO_ROOT/Cargo.toml"
GITHUB_API_URL="https://api.github.com/repos/MystenLabs/sui/releases"
MAIL_SUBJECT="New Sui testnet version available"

# Function to extract current version from Cargo.toml
get_current_version() {
    if [[ ! -f "$CARGO_TOML" ]]; then
        echo "Error: Cargo.toml not found at $CARGO_TOML" >&2
        return 1
    fi
    
    local version
    version=$(grep -E 'tag = "testnet-v[0-9]+\.[0-9]+\.[0-9]+"' "$CARGO_TOML" 2>/dev/null | head -1 | sed -E 's/.*tag = "testnet-v([0-9]+\.[0-9]+\.[0-9]+)".*/\1/')
    
    if [[ -z "$version" ]]; then
        echo "Error: Could not extract current Sui version from $CARGO_TOML" >&2
        return 1
    fi
    
    echo "$version"
    return 0
}

# Function to get latest testnet release from GitHub API
get_latest_testnet_version() {
    local response
    local version
    
    # Check if curl is available
    if ! command -v curl >/dev/null 2>&1; then
        echo "Error: curl is required but not installed" >&2
        return 1
    fi
    
    # Check if jq is available
    if ! command -v jq >/dev/null 2>&1; then
        echo "Error: jq is required but not installed" >&2
        return 1
    fi
    
    # Fetch releases from GitHub API
    if ! response=$(curl -s "$GITHUB_API_URL" 2>/dev/null) || [[ -z "$response" ]]; then
        echo "Error: Failed to fetch releases from GitHub API" >&2
        return 1
    fi
    
    # Parse JSON and extract latest testnet version
    version=$(echo "$response" | jq -r '.[] | select(.tag_name | startswith("testnet-v")) | .tag_name' 2>/dev/null | head -1 | sed 's/testnet-v//')
    
    if [[ -z "$version" ]]; then
        echo "Error: Could not parse latest testnet version from GitHub response" >&2
        return 1
    fi
    
    echo "$version"
    return 0
}

# Function to compare semantic versions
version_gt() {
    if [[ $# -ne 2 ]]; then
        echo "Error: version_gt requires exactly 2 arguments" >&2
        return 1
    fi
    
    local version1="$1"
    local version2="$2"
    
    # Use sort -V to compare versions
    local sorted
    if ! sorted=$(printf '%s\n%s\n' "$version1" "$version2" | sort -V); then
        echo "Error: Failed to sort versions" >&2
        return 1
    fi
    
    # If version2 is not the first in sorted order, then version1 > version2
    if [[ "$(echo "$sorted" | head -n 1)" != "$version1" ]]; then
        return 0  # version1 > version2
    else
        return 1  # version1 <= version2
    fi
}

# Function to send mail notification
send_notification() {
    if [[ $# -ne 2 ]]; then
        echo "Error: send_notification requires exactly 2 arguments" >&2
        return 1
    fi
    
    local current_version="$1"
    local latest_version="$2"
    local release_url="https://github.com/MystenLabs/sui/releases/tag/testnet-v$latest_version"
    
    # Check if mail command is available
    if ! command -v mail >/dev/null 2>&1; then
        echo "Error: mail command is required but not available" >&2
        return 1
    fi
    
    # Check if USER environment variable is set
    if [[ -z "${USER:-}" ]]; then
        echo "Error: USER environment variable is not set" >&2
        return 1
    fi
    
    local message
    message="A new Sui testnet version is available!

Current version in Walrus: testnet-v$current_version
Latest available version: testnet-v$latest_version

Release URL: $release_url

To update, modify the Sui dependency tags in $CARGO_TOML from:
  testnet-v$current_version
to:
  testnet-v$latest_version

Generated by: $0
Timestamp: $(date)"

    if ! echo "$message" | mail -s "$MAIL_SUBJECT" "$USER"; then
        echo "Error: Failed to send mail notification" >&2
        return 1
    fi
    
    return 0
}

# Main execution
main() {
    echo "Checking for new Sui testnet releases..."
    
    # Get current version
    local current_version
    if ! current_version=$(get_current_version); then
        echo "Failed to get current version" >&2
        return 1
    fi
    
    # Get latest version
    local latest_version
    if ! latest_version=$(get_latest_testnet_version); then
        echo "Failed to get latest version" >&2
        return 1
    fi
    
    echo "Current version: testnet-v$current_version"
    echo "Latest version:  testnet-v$latest_version"
    
    # Compare versions
    if version_gt "$latest_version" "$current_version"; then
        echo "New version available! Sending notification..."
        if send_notification "$current_version" "$latest_version"; then
            echo "Mail notification sent to $USER"
            return 0
        else
            echo "Failed to send notification" >&2
            return 1
        fi
    else
        echo "No new version available."
        return 0
    fi
}

# Run main function and exit with its return code
main "$@"
exit $?