name: Generate Sui Version Upgrade PR
run-name: Generate Sui Version Upgrade PR

on:
  workflow_dispatch:
    inputs:
      new_tag:
        description: "New Sui tag (e.g., testnet-v1.55.0), if empty defaults to current"
        required: false
        type: string

  repository_dispatch:
    types: [update-walrus-sui-testnet-tag]

concurrency: ${{ github.workflow }}-${{ inputs.new_tag }}

permissions:
  contents: write
  pull-requests: write

env:
  NEW_TAG: ${{ github.event.client_payload.new_tag || inputs.new_tag || '' }}

jobs:
  bump:
    name: Bump Sui Testnet Version
    runs-on: ubuntu-ghcloud
    outputs:
      pr_url: ${{ steps.generate_pr.outputs.pr_url || '' }}

    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # pin@v4

      - name: Get testnet version, if not provided
        if: ${{ env.NEW_TAG == '' }}
        run: |
          echo "No new tag provided, using current Sui testnet version."
          CURRENT_TAG=$(curl -s https://api.github.com/repos/MystenLabs/sui/releases \
            | jq -r '[.[] | select(.tag_name | startswith("testnet-")) | .tag_name] | first')
          echo "Current Sui testnet version is: $CURRENT_TAG"
          echo "NEW_TAG=$CURRENT_TAG" >> $GITHUB_ENV

      - name: Install ${{ env.NEW_TAG }} sui binary for move builds
        shell: bash
        run: |
          curl -sSfL https://raw.githubusercontent.com/Mystenlabs/suiup/main/install.sh | sh
          suiup install sui@${{ env.NEW_TAG }} -y

      - name: Generate PR for ${{ env.NEW_TAG }}
        id: generate_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
        shell: bash
        run: |
          export PR_URL=$(./scripts/bump_sui_testnet_version.sh "${{ env.NEW_TAG }}")

  notify:
    needs: bump
    name: Notify PR URL
    runs-on: ubuntu-latest
    if: success() && needs.bump.outputs.pr_url != ''

    steps:
    - name: Get link to logs
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh_job_link=$(gh api -X GET 'repos/MystenLabs/walrus/actions/runs/${{ github.run_id }}/jobs' --jq '.jobs.[0].html_url')
        echo "gh_job_link=${gh_job_link}" >> $GITHUB_ENV

    - name: Get current Walrus oncall
      run: |
        export current_oncall=$(curl -s --request GET \
          --url 'https://api.pagerduty.com/oncalls?schedule_ids[]=P9LNVEM' \
          --header 'Accept: application/json' \
          --header 'Authorization: Token token=${{ secrets.PAGERDUTY_ACCESS_KEY }}' \
          --header 'Content-Type: application/json' \
          | jq '.oncalls[].user.summary' | tr -d '"')
        echo "current_oncall=$(echo ${current_oncall})" >> $GITHUB_ENV

        export oncall_name=$(curl -s --request GET \
          --url 'https://api.pagerduty.com/oncalls?schedule_ids[]=P9LNVEM' \
          --header 'Accept: application/json' \
          --header 'Authorization: Token token=${{ secrets.PAGERDUTY_ACCESS_KEY }}' \
          --header 'Content-Type: application/json' \
          | jq '.oncalls[].escalation_policy.summary' | tr -d '"')
        echo "oncall_name=$(echo ${oncall_name})" >> $GITHUB_ENV

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # pin v4.0.2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Get slack id for the oncall
      run: |
        export slack_id=$(aws s3 cp \
          s3://mysten-employees-dir/employees.json - \
          | jq --arg ONCALL "${{ env.current_oncall }}" \
            '.[] | if .name == $ONCALL then .slack_id else empty end')
        echo "slack_id=$(echo ${slack_id} | tr -d '"')" >> $GITHUB_ENV

    - name: Post to slack
      uses: slackapi/slack-github-action@34c3fd73326693ef04728f8611669d918a2d781d # pin@v1.19.0
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        SUI_SHA: ${{ env.sui_sha }}
        GH_JOB_LINK: ${{ env.gh_job_link }}
        SLACK_ID: ${{ env.slack_id }}
        ONCALL_NAME: ${{ env.oncall_name }}
      with:
        channel-id: 'test-notifications'
        slack-message: |
          <!here> :walrus_face::rocket: New Sui version ${{ env.NEW_TAG }} upgrade PR created: ${{ needs.bump.outputs.pr_url }}
          <@${{ env.SLACK_ID }}>, current `${{ env.ONCALL_NAME }}` oncall, please do the following:
          1. Trigger the CI to run on the PR by checking out the PR branch and running:
            `git commit --allow-empty -m "Empty commit to trigger CI" && git push`
          2. Approve and merge the PR if CI passes.
          Run: <${{ env.GH_JOB_LINK }}|${{ github.run_id }}>
