name: Code

on:
  # Run workflow on every PR.
  pull_request:
  # Run workflow on the main branch after every merge.
  # This is important to fill the GitHub Actions cache in a way that PRs can see it.
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  CLICOLOR_FORCE: 1
  # Incremental compilation is useful as part of an edit-build-test-edit cycle, as it lets the
  # compiler avoid recompiling code that hasn't changed. The setting does not improve the current
  # compilation but instead saves additional information to speed up future compilations (see
  # https://doc.rust-lang.org/cargo/reference/profiles.html#incremental). Thus, this is only useful
  # in CI if the result is cached, which we only do on the `main` branch.
  CARGO_INCREMENTAL: ${{ github.ref == 'refs/heads/main' && '1' || '0' }}
  # Allow more retries for network requests in cargo (downloading crates) and
  # rustup (installing toolchains). This should help to reduce flaky CI failures
  # from transient network timeouts or other issues.
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # Don't emit giant backtraces in the CI logs.
  RUST_BACKTRACE: short
  RUSTDOCFLAGS: -D warnings
  SUI_TAG: testnet-v1.39.1

jobs:
  diff:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    outputs:
      isRust: ${{ steps.diff.outputs.isRust }}
      isMove: ${{ steps.diff.outputs.isMove }}
      isDenyConfig: ${{ steps.diff.outputs.isDenyConfig }}
      isTestConfig: ${{ steps.diff.outputs.isTestConfig }}
      isRelevantForRustTests: ${{ steps.diff.outputs.isRust == 'true' || steps.diff.outputs.isMove == 'true' || steps.diff.outputs.isTestConfig
        == 'true' }}
    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # Pin v4.1.1
      - name: Detect Changes
        uses: './.github/actions/diffs'
        id: diff

  dependencies:
    name: Check dependencies
    needs: diff
    if: ${{ needs.diff.outputs.isRust == 'true' || needs.diff.outputs.isDenyConfig == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: EmbarkStudios/cargo-deny-action@v2.0.4
        with:
          # do not check advisories on PRs to prevent sudden failure due to new announcement
          command: check bans licenses sources

  lint:
    name: Lint Rust code
    needs: diff
    if: ${{ needs.diff.outputs.isRust == 'true' }}
    runs-on: ubuntu-ghcloud
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2.7.5
        with:
          save-if: ${{ github.ref == 'refs/heads/main' && 'true' || 'false' }}

      - name: Check formatting with rustfmt
        run: >
          cargo fmt --all -- --check
          --config group_imports=StdExternalCrate,imports_granularity=Crate,imports_layout=HorizontalVertical
      - name: Lint using clippy (w/o tests)
        run: cargo clippy --workspace --all-features --no-deps -- -D warnings
      - name: Lint using clippy (w/ tests)
        run: cargo clippy --workspace --all-features --tests --no-deps -- -D warnings
      - name: Check documentation
        run: cargo doc --workspace --no-deps

  build:
    name: Build Rust code
    needs: diff
    if: ${{ needs.diff.outputs.isRust == 'true' }}
    runs-on: ubuntu-ghcloud
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2.7.5
        with:
          save-if: ${{ github.ref == 'refs/heads/main' && 'true' || 'false' }}
      - name: Build Rust code
        run: cargo build --workspace --verbose

  test-mainnet:
    name: Test Rust code with mainnet contracts
    needs: diff
    if: ${{ needs.diff.outputs.isRelevantForRustTests == 'true' }}
    runs-on: ubuntu-ghcloud
    steps:
      - uses: taiki-e/install-action@v2.46.6
        with:
          tool: cargo-nextest
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2.7.5
        with:
          save-if: ${{ github.ref == 'refs/heads/main' && 'true' || 'false' }}
          shared-key: v0-rust-test
      - name: Run tests
        run: cargo nextest run --workspace --profile ci --run-ignored all --features mainnet-contracts

  test:
    name: Test Rust code with testnet contracts
    needs: diff
    if: ${{ needs.diff.outputs.isRelevantForRustTests == 'true' }}
    runs-on: ubuntu-ghcloud
    steps:
      - uses: taiki-e/install-action@v2.46.6
        with:
          tool: cargo-nextest
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2.7.5
        with:
          save-if: ${{ github.ref == 'refs/heads/main' && 'true' || 'false' }}
          shared-key: v0-rust-test
      - name: Run tests with testnet contracts
        run: cargo nextest run --workspace --profile ci --run-ignored all

  test-coverage:
    name: Run all Rust tests and report coverage
    if: contains(github.event.pull_request.labels.*.name, 'report_coverage')
    runs-on: ubuntu-ghcloud
    permissions:
      contents: read
      pull-requests: write
    env:
      RUSTC_BOOTSTRAP: 1
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/run_tarpaulin
      - name: Add coverage PR comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: ${{ github.event_name == 'pull_request' && github.actor != 'dependabot[bot]' }}
        with:
          path: code-coverage-results.md

  simtests:
    name: Run all simtests with testnet contracts
    needs: diff
    if: ${{ needs.diff.outputs.isRelevantForRustTests == 'true' }}
    runs-on: ubuntu-ghcloud
    continue-on-error: true
    env:
      MSIM_TEST_NUM: 10
      RUST_LOG: error
    steps:
      - uses: taiki-e/install-action@v2.46.6
        with:
          tool: cargo-nextest
      - uses: actions/checkout@v4
      - run: ./scripts/simtest/install.sh
      - name: Run tests with testnet contracts
        run: cargo simtest simtest --profile simtest

  test-move:
    name: Test Move code
    needs: diff
    if: ${{ needs.diff.outputs.isMove == 'true' }}
    runs-on: ubuntu-ghcloud
    env:
      SUI_BIN: "/home/runner/.cargo/bin/sui"
    steps:
      - uses: actions/checkout@v4
      - name: Restore cached sui binary
        id: cache-sui-restore
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.SUI_BIN }}
          key: ${{ runner.os }}-${{ runner.arch }}-${{ env.SUI_TAG }}
      - run: rustup update stable
        if: steps.cache-sui-restore.outputs.cache-hit != 'true'
      - name: Install sui
        if: steps.cache-sui-restore.outputs.cache-hit != 'true'
        run: cargo install --locked --git https://github.com/MystenLabs/sui.git --tag $SUI_TAG --debug sui
      - name: Run Move tests and check coverage
        run: bash ./scripts/move_coverage.sh
      - name: Cache sui binary
        if: ${{ github.ref == 'refs/heads/main' && steps.cache-sui-restore.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.SUI_BIN }}
          key: ${{ steps.cache-sui-restore.outputs.cache-primary-key }}

  check-all:
    name: Check if all code checks succeeded
    if: always()
    needs:
      - diff
      - dependencies
      - lint
      - build
      - test
      - test-mainnet
      - test-move
    runs-on: ubuntu-latest
    steps:
      - name: Decide whether all needed jobs succeeded
        uses: re-actors/alls-green@v1.2.2
        with:
          allowed-skips: ${{ toJSON(needs) }}
          jobs: ${{ toJSON(needs) }}
