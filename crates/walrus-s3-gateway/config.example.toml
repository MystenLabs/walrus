# Walrus S3 Gateway Configuration Example

# Server settings
bind_address = "0.0.0.0:8080"
access_key = "walrus-access-key"
secret_key = "walrus-secret-key"
region = "us-east-1"

# Request handling
max_body_size = 67108864  # 64MB
request_timeout = 300     # 5 minutes
enable_cors = true        # Enable CORS for web applications

# TLS/HTTPS (optional)
enable_tls = false
# tls_cert_path = "/path/to/cert.pem"
# tls_key_path = "/path/to/key.pem"

# Optional: Path to external Walrus client configuration
# walrus_config_path = "/path/to/walrus-client-config.yaml"

# Walrus-specific configuration
[walrus]
# Sui RPC endpoints (testnet)
sui_rpc_urls = [
    "https://sui-testnet-rpc.mystenlabs.com:443",
    "https://sui-testnet.publicnode.com:443"
]

# Walrus storage node endpoints (testnet)
storage_nodes = [
    "https://walrus-testnet.nodes.guru:11444",
    "https://walrus-testnet-storage.stakin-nodes.com:11444"
]

# Committee refresh interval in seconds
committee_refresh_interval = 300  # 5 minutes

# Request timeout for Walrus operations in seconds
request_timeout = 30

# Metrics (optional)
enable_metrics = false
# metrics_port = 9090

# Wallet configuration (required for write operations)
# Note: With the new per-request client architecture, each write operation
# will create a client using credentials extracted from the S3 request.
# The gateway maps S3 access keys to Walrus wallet configurations.

# Example wallet mapping strategy:
# 1. S3 access key -> Sui wallet keystore path
# 2. S3 secret key -> used for signature validation
# 3. Each user needs their own Sui wallet for write operations

# [walrus.wallet_config]
# keystore_path = "/path/to/sui/keystore"
# active_address = "0x..."
# active_env = "testnet"

# Per-user wallet configuration (implemented in create_write_client)
# - keystore_path: "~/.sui/sui_config/sui.keystore.{access_key}"
# - active_env: "testnet"
# - active_address: determined from keystore
