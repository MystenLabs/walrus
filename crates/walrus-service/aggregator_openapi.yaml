openapi: 3.1.0
info:
  title: Walrus Aggregator
  description: ''
  contact:
    name: Mysten Labs
    email: build@mystenlabs.com
  license:
    name: Apache-2.0
    identifier: Apache-2.0
  version: <VERSION>
paths:
  /v1/blobs/by-object-id/{blob_object_id}:
    get:
      tags:
      - routes
      summary: Retrieve a Walrus blob with its associated attribute.
      description: |-
        First retrieves the blob metadata from Sui using the provided object ID (either of the blob
        object or a shared blob), then uses the blob ID from that metadata to fetch the actual blob
        data via the get_blob function. The response includes the raw data along with any attribute
        headers from the metadata that are present in the configured allowed_headers set.
      operationId: get_blob_by_object_id
      parameters:
      - name: blob_object_id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ObjectID'
      responses:
        '200':
          description: The blob was reconstructed successfully. Any attribute headers present in this aggregator's allowed_headers configuration will be included in the response.
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
                  minimum: 0
        '403':
          description: The blob size exceeds the maximum allowed size that was configured for this service. The blob is still stored on Walrus and may be accessible through a different aggregator or the CLI.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '404':
          description: May be returned when (1) The requested blob has not yet been stored on Walrus. (2) The requested quilt patch does not exist on Walrus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '451':
          description: The blob cannot be returned as has been blocked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '500':
          description: An internal server error has occurred. Please report this error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/blobs/by-quilt-id/{quilt_id}/{identifier}:
    get:
      tags:
      - routes
      summary: Retrieve a patch from a Walrus quilt by its quilt ID and identifier.
      description: |-
        Takes a quilt ID and an identifier and returns the corresponding patch from the quilt.
        The patch content is returned as raw bytes in the response body, while metadata
        such as the patch identifier and tags are returned in response headers.

        # Example
        ```bash
        curl -X GET "$aggregator/v1/blobs/by-quilt-id/\
        rkcHpHQrornOymttgvSq3zvcmQEsMqzmeUM1HSY4ShU/my-file.txt"
        ```

        Response:
        ```text
        HTTP/1.1 200 OK
        Content-Type: application/octet-stream
        X-Quilt-Patch-Identifier: my-file.txt
        ETag: "rkcHpHQrornOymttgvSq3zvcmQEsMqzmeUM1HSY4ShU"

        [raw data]
        ```
      operationId: get_patch_by_quilt_id_and_identifier
      parameters:
      - name: quilt_id
        in: path
        description: The quilt's blob ID.
        required: true
        schema:
          $ref: '#/components/schemas/BlobId'
      - name: identifier
        in: path
        description: The identifier of the patch within the quilt
        required: true
        schema:
          type: string
        example: my-file.txt
      responses:
        '200':
          description: The patch was retrieved successfully. Returns the raw bytes of the patch; the identifier and other attributes are returned as headers.
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
                  minimum: 0
        '403':
          description: The blob size exceeds the maximum allowed size that was configured for this service. The blob is still stored on Walrus and may be accessible through a different aggregator or the CLI.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '404':
          description: May be returned when (1) The requested blob has not yet been stored on Walrus. (2) The requested quilt patch does not exist on Walrus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '451':
          description: The blob cannot be returned as has been blocked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '500':
          description: An internal server error has occurred. Please report this error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/blobs/by-quilt-patch-id/{quilt_patch_id}:
    get:
      tags:
      - routes
      summary: Retrieve a patch from a Walrus quilt by its quilt patch ID.
      description: |-
        Takes a quilt patch ID and returns the corresponding patch from the quilt.
        The patch content is returned as raw bytes in the response body, while metadata
        such as the patch identifier and tags are returned in response headers.

        # Example
        ```bash
        curl -X GET "$AGGREGATOR/v1/blobs/by-quilt-patch-id/\
        DJHLsgUoKQKEPcw3uehNQwuJjMu5a2sRdn8r-f7iWSAAC8Pw"
        ```

        Response:
        ```text
        HTTP/1.1 200 OK
        Content-Type: application/octet-stream
        X-Quilt-Patch-Identifier: my-file.txt
        ETag: "DJHLsgUoKQKEPcw3uehNQwuJjMu5a2sRdn8r-f7iWSAAC8Pw"

        [raw data]
        ```
      operationId: get_patch_by_quilt_patch_id
      parameters:
      - name: quilt_patch_id
        in: path
        description: The quilt patch ID encoded as a URL-safe base64 string, without the trailing equal (=) signs.
        required: true
        schema:
          $ref: '#/components/schemas/QuiltPatchId'
        example: DJHLsgUoKQKEPcw3uehNQwuJjMu5a2sRdn8r-f7iWSAAC8Pw
      responses:
        '200':
          description: The patch was retrieved successfully. Returns the raw bytes of the patch; the identifier and other attributes are returned as header.
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
                  minimum: 0
        '403':
          description: The blob size exceeds the maximum allowed size that was configured for this service. The blob is still stored on Walrus and may be accessible through a different aggregator or the CLI.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '404':
          description: May be returned when (1) The requested blob has not yet been stored on Walrus. (2) The requested quilt patch does not exist on Walrus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '451':
          description: The blob cannot be returned as has been blocked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '500':
          description: An internal server error has occurred. Please report this error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/blobs/{blob_id}:
    get:
      tags:
      - routes
      summary: Retrieve a Walrus blob.
      description: Reconstructs the blob identified by the provided blob ID from Walrus and returns its raw data.
      operationId: get_blob
      parameters:
      - name: blob_id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BlobId'
      responses:
        '200':
          description: The blob was reconstructed successfully
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
                  minimum: 0
        '403':
          description: The blob size exceeds the maximum allowed size that was configured for this service. The blob is still stored on Walrus and may be accessible through a different aggregator or the CLI.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '404':
          description: May be returned when (1) The requested blob has not yet been stored on Walrus. (2) The requested quilt patch does not exist on Walrus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '451':
          description: The blob cannot be returned as has been blocked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '500':
          description: An internal server error has occurred. Please report this error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/quilts/{quilt_id}/patches:
    get:
      tags:
      - routes
      summary: List patches in a quilt.
      description: |-
        Returns a list of identifiers and quilt patch IDs for all patches contained in the specified
        quilt. Each quilt patch ID can be used with the `/v1/blobs/by-quilt-patch-id` endpoint to
        retrieve the actual blob data.

        # Example
        ```bash
        curl -X GET "$aggregator/v1/quilts/patches-by-id/\
        rkcHpHQrornOymttgvSq3zvcmQEsMqzmeUM1HSY4ShU"
        ```

        Response:
        ```json
        [
          {
            "identifier": "walrus-38.jpeg",
            "patch_id": "uIiEbhP2qgZYygEGxJX1GeB-rQATo2yufC2DCp7B4iABAQANAA"
          },
          {
            "identifier": "walrus-39.avif",
            "patch_id": "uIiEbhP2qgZYygEGxJX1GeB-rQATo2yufC2DCp7B4iABDQBnAA"
          }
        ]
        ```
      operationId: list_patches_in_quilt
      parameters:
      - name: quilt_id
        in: path
        description: The quilt ID encoded as URL-safe base64
        required: true
        schema:
          $ref: '#/components/schemas/BlobId'
        example: rkcHpHQrornOymttgvSq3zvcmQEsMqzmeUM1HSY4ShU
      responses:
        '200':
          description: Successfully retrieved the list of patches in the quilt
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuiltPatchItem'
        '403':
          description: The blob size exceeds the maximum allowed size that was configured for this service. The blob is still stored on Walrus and may be accessible through a different aggregator or the CLI.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '404':
          description: May be returned when (1) The requested blob has not yet been stored on Walrus. (2) The requested quilt patch does not exist on Walrus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '451':
          description: The blob cannot be returned as has been blocked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '500':
          description: An internal server error has occurred. Please report this error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
components:
  schemas:
    BlobId:
      type: string
      format: byte
      description: The ID of a blob.
      examples:
      - E7_nNXvFU_3qZVu3OH1yycRG7LZlyn1-UxEDCDDqGGU
    ObjectID:
      type: string
      title: Sui object ID
      description: Sui object ID as a hexadecimal string
      examples:
      - 0x56ae1c86e17db174ea002f8340e28880bc8a8587c56e8604a4fa6b1170b23a60
    QuiltPatchId:
      type: object
      description: |-
        A QuiltPatchId is a globally unique id for a quilt patch.

        A quilt patch is a individual blob within a quilt.
      required:
      - quiltId
      - patchIdBytes
      properties:
        patchIdBytes:
          type: array
          items:
            type: integer
            format: int32
            minimum: 0
          description: The patch id of the quilt patch.
        quiltId:
          $ref: '#/components/schemas/BlobId'
          description: The BlobId of the quilt as a Walrus blob.
    QuiltPatchItem:
      type: object
      description: Response item for a patch in a quilt.
      required:
      - identifier
      - patch_id
      - tags
      properties:
        identifier:
          type: string
          description: The identifier of the patch (e.g., filename).
        patch_id:
          $ref: '#/components/schemas/QuiltPatchId'
          description: |-
            The patch ID for this patch, encoded as a URL-safe base64 string, without the trailing equal
            (=) signs.
        tags:
          type: object
          description: Tags for the patch.
          additionalProperties:
            type: string
          propertyNames:
            type: string
    Status:
      type: object
      description: |-
        A message returned from a failed API call.

        Contains both human-readable and machine-readable details of the error,
        to assist in resolving the error.
      required:
      - error
      properties:
        error:
          allOf:
          - oneOf:
            - type: object
              required:
              - status
              - code
              properties:
                code:
                  type: integer
                  format: int32
                  description: HTTP status code associated with the error.
                  minimum: 0
                status:
                  type: string
                  description: General type of error, given as an UPPER_SNAKE_CASE string.
            description: The status code corresponding to the error.
          - type: object
            required:
            - message
            - details
            properties:
              details:
                type: array
                items:
                  type: object
                description: |-
                  Machine readable details of the error.

                  Always contains an [`ErrorInfo`], which provides a machine-readable
                  representation of the of the `message` field.
              message:
                type: string
                description: A message describing the error in detail.
