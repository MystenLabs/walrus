[package]
name = "walrus-service"
publish = false
authors.workspace = true
version.workspace = true
edition.workspace = true
license.workspace = true

[[bin]]
name = "walrus"
path = "bin/client.rs"
required-features = ["client"]

[[bin]]
name = "walrus-node"
path = "bin/node.rs"
required-features = ["node"]

[[bin]]
name = "walrus-deploy"
path = "bin/deploy.rs"
required-features = ["deploy"]

[features]
client = [
  "dep:colored",
  "dep:prettytable",
]
default = ["client", "deploy", "node"]
deploy = ["client", "node", "walrus-sui/test-utils"]
node = [
  "dep:async-trait",
  "dep:enum_dispatch",
  "dep:mime",
  "dep:mysten-metrics",
  "dep:rocksdb",
  "dep:tokio-stream",
  "dep:tokio-util",
  "dep:typed-store",
]
test-utils = [
  "client",
  "dep:tempfile",
  "dep:walrus-test-utils",
  "node",
  "walrus-core/test-utils",
  "walrus-sui/test-utils",
]

[dependencies]
anyhow.workspace = true
async-trait = { workspace = true, optional = true }
axum = { workspace = true, features = [
  "http1",
  "http2",
  "matched-path",
  "tokio",
  "tower-log",
  "tracing",
] }
axum-server = { workspace = true, features = ["tls-rustls-no-provider"] }
bcs.workspace = true
byteorder.workspace = true
chrono.workspace = true
clap.workspace = true
colored = { workspace = true, optional = true }
enum_dispatch = { workspace = true, optional = true }
fastcrypto.workspace = true
futures.workspace = true
futures-util.workspace = true
git-version.workspace = true
home.workspace = true
hostname.workspace = true
humantime.workspace = true
indicatif.workspace = true
indoc.workspace = true
integer-encoding.workspace = true
itertools.workspace = true
mime = { workspace = true, optional = true }
move-core-types.workspace = true
mysten-metrics = { workspace = true, optional = true }
num-bigint.workspace = true
opentelemetry.workspace = true
p256.workspace = true
pin-project.workspace = true
prettytable = { workspace = true, optional = true }
prometheus.workspace = true
rand.workspace = true
rcgen.workspace = true
regex.workspace = true
reqwest.workspace = true
rocksdb = { workspace = true, optional = true }
rustls.workspace = true
serde.workspace = true
serde_json.workspace = true
serde_with.workspace = true
serde_yaml.workspace = true
snap.workspace = true
sui-config.workspace = true
sui-macros.workspace = true
sui-package-resolver.workspace = true
sui-protocol-config.workspace = true
sui-rpc-api.workspace = true
sui-sdk.workspace = true
sui-storage.workspace = true
sui-types.workspace = true
telemetry-subscribers.workspace = true
tempfile = { workspace = true, optional = true }
thiserror.workspace = true
tokio.workspace = true
tokio-stream = { workspace = true, optional = true }
tokio-util = { workspace = true, optional = true }
tower = { workspace = true, features = ["buffer", "limit", "load-shed", "util"] }
tower-http.workspace = true
tracing.workspace = true
tracing-opentelemetry.workspace = true
tracing-subscriber.workspace = true
typed-store = { workspace = true, optional = true }
utoipa = { workspace = true, features = ["axum_extras"] }
utoipa-redoc.workspace = true
uuid.workspace = true
walrus-core = { workspace = true, features = ["sui-types", "utoipa"] }
walrus-sdk.workspace = true
walrus-sui = { workspace = true, features = ["utoipa"] }
walrus-test-utils = { workspace = true, optional = true }
walrus-utils.workspace = true

[dev-dependencies]
mockall.workspace = true
tempfile.workspace = true
walrus-core = { workspace = true, features = ["test-utils"] }
walrus-proc-macros.workspace = true
walrus-test-utils.workspace = true

[lints]
workspace = true

[target.'cfg(msim)'.dependencies]
sui-simulator.workspace = true
