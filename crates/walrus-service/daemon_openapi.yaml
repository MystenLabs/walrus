openapi: 3.1.0
info:
  title: Walrus Daemon
  description: ''
  contact:
    name: Mysten Labs
    email: build@mystenlabs.com
  license:
    name: Apache-2.0
    identifier: Apache-2.0
  version: <VERSION>
paths:
  /v1/blobs:
    put:
      tags:
      - routes
      summary: Store a blob on Walrus.
      description: |-
        Store a (potentially deletable) blob on Walrus for 1 or more epochs. The associated on-Sui
        object can be sent to a specified Sui address.
      operationId: put_blob
      parameters:
      - name: encoding_type
        in: query
        description: The encoding type to use for the blob.
        required: false
        schema:
          $ref: '#/components/schemas/EncodingType'
        style: form
      - name: epochs
        in: query
        description: |-
          The number of epochs, ahead of the current one, for which to store the blob.

          The default is 1 epoch.
        required: false
        schema:
          $ref: '#/components/schemas/u32'
        style: form
      - name: deletable
        in: query
        description: |-
          If true, the publisher creates a deletable blob instead of a permanent one. *This will
          become the default behavior starting with v1.33.*
        required: false
        schema:
          type: boolean
        style: form
      - name: permanent
        in: query
        description: |-
          If true, the publisher creates a permanent blob. This is currently the default behavior;
          but *blobs will be deletable by default starting with v1.33*.
        required: false
        schema:
          type: boolean
        style: form
      - name: force
        in: query
        description: |-
          If true, the publisher will always store the blob, creating a new Blob object.

          The blob will be stored even if the blob is already certified on Walrus for the specified
          number of epochs.
        required: false
        schema:
          type: boolean
        style: form
      - name: quilt_version
        in: query
        description: |-
          The quilt version to use (for quilt endpoints only).
          Valid values: "v1", "V1", or "1". Defaults to "v1" if not specified.
        required: false
        schema:
          $ref: '#/components/schemas/QuiltVersionEnum'
        style: form
      - name: send_or_share
        in: query
        required: false
        schema:
          oneOf:
          - type: object
            description: Send the blob to the specified Sui address.
            required:
            - send_object_to
            properties:
              send_object_to:
                $ref: '#/components/schemas/SuiAddress'
                description: Send the blob to the specified Sui address.
          - type: object
            description: Turn the created blob into a shared blob.
            required:
            - share
            properties:
              share:
                type: boolean
                description: Turn the created blob into a shared blob.
          description: The exclusive option to share the blob or to send it to an address.
        style: form
      requestBody:
        description: Binary data of the unencoded blob to be stored.
        content:
          application/octet-stream:
            schema:
              $ref: '#/components/schemas/Binary'
        required: true
      responses:
        '200':
          description: The blob was stored successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlobStoreResult'
        '400':
          description: May be returned when (1) The blob cannot be defined as both deletable and permanent. (2) The request is malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '413':
          description: The blob is too large
        '451':
          description: The blob cannot be returned as it has been blocked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '500':
          description: An internal server error has occurred. Please report this error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '504':
          description: The service failed to store the blob to sufficient Walrus storage nodes before a timeout, please retry the operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/blobs/by-object-id/{blob_object_id}:
    get:
      tags:
      - routes
      summary: Retrieve a Walrus blob with its associated attribute.
      description: |-
        First retrieves the blob metadata from Sui using the provided object ID (either of the blob
        object or a shared blob), then uses the blob_id from that metadata to fetch the actual blob
        data via the get_blob function. The response includes the binary data along with any attribute
        headers from the metadata that are present in the configured allowed_headers set.
      operationId: get_blob_by_object_id
      parameters:
      - name: blob_object_id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/ObjectID'
      responses:
        '200':
          description: The blob was reconstructed successfully. Any attribute headers present in the allowed_headers configuration will be included in the response.
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
                  minimum: 0
        '404':
          description: May be returned when (1) The requested blob has not yet been stored on Walrus. (2) The requested quilt patch does not exist on Walrus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '451':
          description: The blob cannot be returned as has been blocked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '500':
          description: An internal server error has occurred. Please report this error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/blobs/by-quilt-id/{quilt_id}/{identifier}:
    get:
      tags:
      - routes
      summary: Get blob from quilt by ID and identifier
      description: Retrieve a specific blob from a quilt using the quilt ID and its identifier. Returns the raw blob bytes, the identifier and other attributes are returned as headers. If the quilt ID or identifier is not found, the response is 404.
      operationId: get_blob_by_quilt_id_and_identifier
      parameters:
      - name: quilt_id
        in: path
        description: The quilt ID encoded as URL-safe base64
        required: true
        schema:
          $ref: '#/components/schemas/BlobId'
        example: rkcHpHQrornOymttgvSq3zvcmQEsMqzmeUM1HSY4ShU
      - name: identifier
        in: path
        description: The identifier of the blob within the quilt
        required: true
        schema:
          type: string
        example: my-file.txt
      responses:
        '200':
          description: The blob was retrieved successfully. Returns the raw blob bytes, the identifier and other attributes are returned as headers.
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
                  minimum: 0
        '404':
          description: May be returned when (1) The requested blob has not yet been stored on Walrus. (2) The requested quilt patch does not exist on Walrus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '451':
          description: The blob cannot be returned as has been blocked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '500':
          description: An internal server error has occurred. Please report this error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/blobs/by-quilt-patch-id/{quilt_patch_id}:
    get:
      tags:
      - routes
      summary: Get blob from quilt
      description: Retrieve a specific blob from a quilt using its QuiltPatchId. Returns the raw blob bytes, the identifier and other attributes are returned as headers.
      operationId: get_blob_by_quilt_patch_id
      parameters:
      - name: quilt_patch_id
        in: path
        description: The QuiltPatchId encoded as URL-safe base64
        required: true
        schema:
          $ref: '#/components/schemas/QuiltPatchId'
        example: DJHLsgUoKQKEPcw3uehNQwuJjMu5a2sRdn8r-f7iWSAAC8Pw
      responses:
        '200':
          description: The blob was retrieved successfully. Returns the raw blob bytes, the identifier and other attributes are returned as headers.
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
                  minimum: 0
        '404':
          description: May be returned when (1) The requested blob has not yet been stored on Walrus. (2) The requested quilt patch does not exist on Walrus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '451':
          description: The blob cannot be returned as has been blocked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '500':
          description: An internal server error has occurred. Please report this error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/blobs/{blob_id}:
    get:
      tags:
      - routes
      summary: Retrieve a Walrus blob.
      description: Reconstructs the blob identified by the provided blob ID from Walrus and return it binary data.
      operationId: get_blob
      parameters:
      - name: blob_id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/BlobId'
      responses:
        '200':
          description: The blob was reconstructed successfully
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: integer
                  format: int32
                  minimum: 0
        '404':
          description: May be returned when (1) The requested blob has not yet been stored on Walrus. (2) The requested quilt patch does not exist on Walrus.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '451':
          description: The blob cannot be returned as has been blocked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '500':
          description: An internal server error has occurred. Please report this error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /v1/quilts:
    put:
      tags:
      - routes
      summary: Store multiple blobs as a quilt using multipart/form-data.
      description: |-
        Accepts a multipart form with blobs and optional per blob Walrus-native metadata.
        The form contains:
        - Blobs identified by their identifiers as field names
        - An optional `_metadata` field containing a JSON array with per blob Walrus-native metadata

        # Contents of Walrus-native metadata
        - `identifier`: The identifier of the blob, must match the corresponding blob field name
        - `tags`: JSON object with string key-value pairs (optional)

        Blobs without corresponding metadata entries will be stored with empty tags.

        # Examples

        ## Blobs without Walrus-native metadata, with quilt version V1
        ```bash
        curl -X PUT "http://localhost:8080/v1/quilts?epochs=5&quilt_version=V1" \
          -F "contract-v2=@document.pdf" \
          -F "logo-2024=@image.png"
        ```

        ## Blobs with Walrus-native metadata, with default quilt version
        ```bash
        curl -X PUT "http://localhost:8080/v1/quilts?epochs=5" \
          -F "quilt-manual=@document.pdf" \
          -F "logo-2025=@image.png" \
          -F "_metadata=[
            {"identifier": "quilt-manual", "tags": {"creator": "walrus", "version": "1.0"}},
            {"identifier": "logo-2025", "tags": {"type": "logo", "format": "png"}}
          ]'
        ```
      operationId: put_quilt
      parameters:
      - name: encoding_type
        in: query
        description: The encoding type to use for the blob.
        required: false
        schema:
          $ref: '#/components/schemas/EncodingType'
        style: form
      - name: epochs
        in: query
        description: |-
          The number of epochs, ahead of the current one, for which to store the blob.

          The default is 1 epoch.
        required: false
        schema:
          $ref: '#/components/schemas/u32'
        style: form
      - name: deletable
        in: query
        description: |-
          If true, the publisher creates a deletable blob instead of a permanent one. *This will
          become the default behavior starting with v1.33.*
        required: false
        schema:
          type: boolean
        style: form
      - name: permanent
        in: query
        description: |-
          If true, the publisher creates a permanent blob. This is currently the default behavior;
          but *blobs will be deletable by default starting with v1.33*.
        required: false
        schema:
          type: boolean
        style: form
      - name: force
        in: query
        description: |-
          If true, the publisher will always store the blob, creating a new Blob object.

          The blob will be stored even if the blob is already certified on Walrus for the specified
          number of epochs.
        required: false
        schema:
          type: boolean
        style: form
      - name: quilt_version
        in: query
        description: |-
          The quilt version to use (for quilt endpoints only).
          Valid values: "v1", "V1", or "1". Defaults to "v1" if not specified.
        required: false
        schema:
          $ref: '#/components/schemas/QuiltVersionEnum'
        style: form
      - name: send_or_share
        in: query
        required: false
        schema:
          oneOf:
          - type: object
            description: Send the blob to the specified Sui address.
            required:
            - send_object_to
            properties:
              send_object_to:
                $ref: '#/components/schemas/SuiAddress'
                description: Send the blob to the specified Sui address.
          - type: object
            description: Turn the created blob into a shared blob.
            required:
            - share
            properties:
              share:
                type: boolean
                description: Turn the created blob into a shared blob.
          description: The exclusive option to share the blob or to send it to an address.
        style: form
      requestBody:
        description: Multipart form with blobs and their Walrus-native metadata
        content:
          multipart/form-data: {}
      responses:
        '200':
          description: The quilt was stored successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuiltStoreResult'
        '400':
          description: May be returned when (1) The blob cannot be defined as both deletable and permanent. (2) The request is malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '413':
          description: The quilt is too large
        '451':
          description: The blob cannot be returned as it has been blocked.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '500':
          description: An internal server error has occurred. Please report this error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '504':
          description: The service failed to store the blob to sufficient Walrus storage nodes before a timeout, please retry the operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
components:
  schemas:
    Binary:
      type: string
      format: binary
    Blob:
      type: object
      description: Sui object for a blob.
      required:
      - id
      - registeredEpoch
      - blobId
      - size
      - encodingType
      - storage
      - deletable
      properties:
        blobId:
          $ref: '#/components/schemas/BlobId'
          description: The blob ID.
        certifiedEpoch:
          oneOf:
          - type: 'null'
          - $ref: '#/components/schemas/u32'
            description: The epoch in which the blob was first certified, `None` if the blob is uncertified.
        deletable:
          type: boolean
          description: Marks the blob as deletable.
        encodingType:
          $ref: '#/components/schemas/EncodingType'
          description: The encoding coding type used for the blob.
        id:
          $ref: '#/components/schemas/ObjectID'
        registeredEpoch:
          $ref: '#/components/schemas/u32'
          description: The epoch in which the blob has been registered.
        size:
          type: integer
          format: int64
          description: The (unencoded) size of the blob.
          minimum: 0
        storage:
          $ref: '#/components/schemas/StorageResource'
          description: The [`StorageResource`] used to store the blob.
    BlobId:
      type: string
      format: byte
      description: The ID of a blob.
      examples:
      - E7_nNXvFU_3qZVu3OH1yycRG7LZlyn1-UxEDCDDqGGU
    BlobStoreResult:
      oneOf:
      - type: object
        description: |-
          The blob already exists within Walrus, was certified, and is stored for at least the
          intended duration.
        required:
        - alreadyCertified
        properties:
          alreadyCertified:
            allOf:
            - $ref: '#/components/schemas/EventOrObjectId'
              description: |-
                The event where the blob was certified, or the object ID of the registered blob.

                The object ID of the registered blob is used in place of the event ID when the blob is
                deletable, already certified, and owned by the client.
            - type: object
              required:
              - blob_id
              - end_epoch
              properties:
                blob_id:
                  $ref: '#/components/schemas/BlobId'
                  description: The blob ID.
                end_epoch:
                  type: integer
                  format: int64
                  description: The epoch until which the blob is stored (exclusive).
                  minimum: 0
            description: |-
              The blob already exists within Walrus, was certified, and is stored for at least the
              intended duration.
      - type: object
        description: |-
          The blob was newly created; this contains the newly created Sui object associated with the
          blob.
        required:
        - newlyCreated
        properties:
          newlyCreated:
            type: object
            description: |-
              The blob was newly created; this contains the newly created Sui object associated with the
              blob.
            required:
            - blob_object
            - resource_operation
            - cost
            properties:
              blob_object:
                $ref: '#/components/schemas/Blob'
                description: The Sui blob object that holds the newly created blob.
              cost:
                type: integer
                format: int64
                description: The storage cost, excluding gas.
                minimum: 0
              resource_operation:
                $ref: '#/components/schemas/RegisterBlobOp'
                description: The operation that created the blob.
              shared_blob_object:
                oneOf:
                - type: 'null'
                - $ref: '#/components/schemas/ObjectID'
                  description: The shared blob object ID if created.
      - type: object
        description: |-
          The blob is known to Walrus but was marked as invalid.

          This indicates a bug within the client, the storage nodes, or more than a third malicious
          storage nodes.
        required:
        - markedInvalid
        properties:
          markedInvalid:
            type: object
            description: |-
              The blob is known to Walrus but was marked as invalid.

              This indicates a bug within the client, the storage nodes, or more than a third malicious
              storage nodes.
            required:
            - blob_id
            - event
            properties:
              blob_id:
                $ref: '#/components/schemas/BlobId'
                description: The blob ID.
              event:
                $ref: '#/components/schemas/EventID'
                description: The event where the blob was marked as invalid.
      - type: object
        description: Operation failed.
        required:
        - error
        properties:
          error:
            type: object
            description: Operation failed.
            required:
            - error_msg
            properties:
              blob_id:
                oneOf:
                - type: 'null'
                - $ref: '#/components/schemas/BlobId'
                  description: The blob ID.
              error_msg:
                type: string
                description: The error message.
      description: Result when attempting to store a blob.
    EncodingType:
      type: string
      description: Supported Walrus encoding types.
      enum:
      - RS2
    Epoch:
      type: integer
      format: int32
      description: Walrus epoch.
      minimum: 0
    EventID:
      type: object
      description: Schema for the [`sui_types::event::EventID`] type.
      required:
      - txDigest
      - eventSeq
      properties:
        eventSeq:
          type: string
        txDigest:
          type: array
          items:
            type: integer
            format: byte
            minimum: 0
      examples:
      - txDigest: EhtoQF9UpPyg5PsPUs69LdkcRrjQ3R4cTsHnwxZVTNrC
        eventSeq: 0
    EventOrObjectId:
      oneOf:
      - type: object
        description: The variant representing an event ID.
        required:
        - event
        properties:
          event:
            $ref: '#/components/schemas/EventID'
            description: The variant representing an event ID.
      - type: object
        description: The variant representing an object ID.
        required:
        - object
        properties:
          object:
            $ref: '#/components/schemas/ObjectID'
            description: The variant representing an object ID.
      description: Either an event ID or an object ID.
    ObjectID:
      type: string
      title: Sui object ID
      description: Sui object ID as a hexadecimal string
      examples:
      - 0x56ae1c86e17db174ea002f8340e28880bc8a8587c56e8604a4fa6b1170b23a60
    QuiltStoreResult:
      type: object
      description: Result when attempting to store a quilt.
      required:
      - blobStoreResult
      - storedQuiltBlobs
      properties:
        blobStoreResult:
          $ref: '#/components/schemas/BlobStoreResult'
          description: The result of storing the quilt data as a blob.
        storedQuiltBlobs:
          type: array
          items:
            $ref: '#/components/schemas/StoredQuiltPatch'
          description: The structure of the quilt.
    RegisterBlobOp:
      oneOf:
      - type: object
        description: The storage and blob resources are purchased from scratch.
        required:
        - registerFromScratch
        properties:
          registerFromScratch:
            type: object
            description: The storage and blob resources are purchased from scratch.
            required:
            - encoded_length
            - epochs_ahead
            properties:
              encoded_length:
                type: integer
                format: int64
                description: The size of the encoded blob in bytes.
                minimum: 0
              epochs_ahead:
                type: integer
                format: int32
                description: The number of epochs ahead for which the blob is registered.
                minimum: 0
      - type: object
        description: The storage is reused, but the blob was not registered.
        required:
        - reuseStorage
        properties:
          reuseStorage:
            type: object
            description: The storage is reused, but the blob was not registered.
            required:
            - encoded_length
            properties:
              encoded_length:
                type: integer
                format: int64
                description: The size of the encoded blob in bytes.
                minimum: 0
      - type: object
        description: A registration was already present.
        required:
        - reuseRegistration
        properties:
          reuseRegistration:
            type: object
            description: A registration was already present.
            required:
            - encoded_length
            properties:
              encoded_length:
                type: integer
                format: int64
                description: The size of the encoded blob in bytes.
                minimum: 0
      - type: object
        description: The blob was already certified, but its lifetime is too short.
        required:
        - reuseAndExtend
        properties:
          reuseAndExtend:
            type: object
            description: The blob was already certified, but its lifetime is too short.
            required:
            - encoded_length
            - epochs_extended
            properties:
              encoded_length:
                type: integer
                format: int64
                description: The size of the encoded blob in bytes.
                minimum: 0
              epochs_extended:
                type: integer
                format: int32
                description: The number of epochs extended wrt the original epoch end.
                minimum: 0
      - type: object
        description: |-
          The blob was registered, but not certified, and its lifetime is shorter than
          the desired one.
        required:
        - reuseAndExtendNonCertified
        properties:
          reuseAndExtendNonCertified:
            type: object
            description: |-
              The blob was registered, but not certified, and its lifetime is shorter than
              the desired one.
            required:
            - encoded_length
            - epochs_extended
            properties:
              encoded_length:
                type: integer
                format: int64
                description: The size of the encoded blob in bytes.
                minimum: 0
              epochs_extended:
                type: integer
                format: int32
                description: The number of epochs extended wrt the original epoch end.
                minimum: 0
      description: The operation performed on blob and storage resources to register a blob.
    Status:
      type: object
      description: |-
        A message returned from a failed API call.

        Contains both human-readable and machine-readable details of the error,
        to assist in resolving the error.
      required:
      - error
      properties:
        error:
          allOf:
          - oneOf:
            - type: object
              required:
              - status
              - code
              properties:
                code:
                  type: integer
                  format: int32
                  description: HTTP status code associated with the error.
                  minimum: 0
                status:
                  type: string
                  description: General type of error, given as an UPPER_SNAKE_CASE string.
            description: The status code corresponding to the error.
          - type: object
            required:
            - message
            - details
            properties:
              details:
                type: array
                items:
                  type: object
                description: |-
                  Machine readable details of the error.

                  Always contains an [`ErrorInfo`], which provides a machine-readable
                  representation of the of the `message` field.
              message:
                type: string
                description: A message describing the error in detail.
    StorageResource:
      type: object
      description: Sui object for storage resources.
      required:
      - id
      - startEpoch
      - endEpoch
      - storageSize
      properties:
        endEpoch:
          $ref: '#/components/schemas/u32'
          description: The end epoch of the resource (exclusive).
        id:
          $ref: '#/components/schemas/ObjectID'
        startEpoch:
          $ref: '#/components/schemas/u32'
          description: The start epoch of the resource (inclusive).
        storageSize:
          type: integer
          format: int64
          description: The total amount of reserved storage.
          minimum: 0
    StoredQuiltPatch:
      type: object
      description: Identifies a stored quilt patch.
      required:
      - identifier
      - quiltPatchId
      properties:
        identifier:
          type: string
          description: The identifier of the quilt patch.
        quiltPatchId:
          type: string
          description: The quilt patch id.
    SuiAddress:
      type: string
      title: Sui address
      description: Sui address encoded as a hexadecimal string
      examples:
      - 0x02a212de6a9dfa3a69e22387acfbafbb1a9e591bd9d636e7895dcfc8de0
    u32:
      type: integer
      format: int32
      minimum: 0
